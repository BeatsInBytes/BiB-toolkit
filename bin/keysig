#!/bin/bash

# The usage message when errors are made
usageMessage="ERROR: usage: keysig [-ains] <inputfile>"

# Define the keysig function
keySigFinder() {
   # $file $help $helpFull $interpretations $average
   dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
   if [ $2 == 'true' ] || [ $3 == 'true' ]; then
      cat $dir/man/keysig
   else
      if [ -f $1 ]; then
         if [ $4 == 'true' ]; then
            
            assign=$(grep '*' $1 | grep ':' | grep . | wc -l)
            echo "         |  track 1  |  track2  |  track3  |"
            echo "---------------------------------------------
part1:   |  C Major  |  D Major |  E Major |
---------------------------------------------
part2:   |  C Major  |  D Major |  E Major |
---------------------------------------------"
            echo
         else
            lineNum=$(cat $1 | grep 'k\[' | wc -l)

            tracknum $1
            
            for i in $(seq 1 $lineNum); do
               cat $1 | grep 'k\[' | sed "${i}q;d" | tr '\t' '\n' | grep .
               printf "\n"
            done
         fi
      else
         echo "keysig: ERROR: File '$1' does not exist"
         echo "$usageMessage"
      fi
   fi
}


#lists all inputs
allArgList=$(echo "$@" | tr ' ' '\n' )
 
# Read the input file(s)
file=$(echo "$allArgList" | sed '/^-/ d')

# Check number of files
numFile=$(echo "$file" | grep . | wc -l | tr -d ' ')

argNum=$(echo "$allArgList" | grep . | wc -l)

argListFirst=$(for i; do echo $i | grep ^- ; done)

#=========================================

singopt=$(echo "$allArgList" | grep -v -- '--' | grep ^- | grep . | tr -d '-' | grep -o .)
singoptNum=$(echo "$singopt" | wc -l)

singUnrec=$(echo "$singopt" | grep -v 'a\|i\|n\|s' | grep .)
singUnrecNum=$(echo "$singUnrec" | grep . | wc -l)

doub=$(echo "$allArgList" | grep -- '--' | grep .  | grep -v -- ^--interpretations$ | grep -v -- ^--averages$)
doubNum=$(echo "$doub" | grep . | wc -l)


if [[ ! $doubNum -eq 0 ]]; then
   echo "$usageMessage"
   echo "
The following are not recoginzed options for the keysig program:"
   for i in $(seq 1 $doubNum); do
      printf "\t-"
      echo "$doub" | sed "${i}q;d"
   done
   exit 1
fi
#===============================

if [ $singUnrecNum -gt 0 ]; then
   echo "$usageMessage"
   echo "
The following are not recoginzed options for the keysig program:"
   for i in $(seq 1 $singUnrecNum); do
      printf "\t-"
      echo "$singUnrec" | sed "${i}q;d"
   done
   exit 1
else

   # if [ $argNum -eq 0 ]; then
   #    echo "$usageMessage"
   # else
      # File number handling
      if [ $numFile -eq '0' ]; then
         argList=$(for i; do echo $i | grep ^- ; done)

         help=$(echo $argList | tr ' ' '\n' | grep -- '^-h$')
         if [ -z $help ]; then 
            help=false
         else
            help=true
         fi

         helpFull=$(echo $argList | tr ' ' '\n' | grep -- '^--help$')
         if [ -z $helpFull ]; then 
            helpFull=false
         else
            helpFull=true
         fi
         if [ $help == 'true' ] || [ $helpFull == 'true' ]; then
            dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
            cat $dir/man/keysig
         else
         echo "$usageMessage"
               echo "   
         keysig: ERROR: No input file specified
         "
         fi

      elif [ $numFile -gt '1' ]; then
         echo "
         keysig: ERROR: $numFile input files; only 1 supported
         "
      else
         argList=$(for i; do echo $i | grep ^- ; done)
         help=$(echo $argList | tr ' ' '\n' | grep -- '^-h$')
         if [ -z $help ]; then 
            help=false
         else
            help=true
         fi

         helpFull=$(echo $argList | tr ' ' '\n' | grep -- '^--help$')
         if [ -z $helpFull ]; then 
            helpFull=false
         else
            helpFull=true
         fi

         interpretations=$(echo $argList | tr ' ' '\n' | grep -- '^-i$')
         interpretationsFull=$(echo $argList | tr ' ' '\n' | grep -- '^--interpretations$')

         if [[ ! -z $interpretations ]] || [[ ! -z $interpretationsFull ]] ; then 
            interpretations=true
         else
            interpretations=false
         fi

         average=$(echo $argList | tr ' ' '\n' | grep -- '^-a$')
         averageFull=$(echo $argList | tr ' ' '\n' | grep -- '^--average$')

         if [[ ! -z $average ]] || [[ ! -z $averageFull ]]; then 
            average=true
         else
            average=false
         fi

         keySigFinder $file $help $helpFull $interpretations $average
      fi
   # fi
fi